name: Build CANN Images

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - ".github/workflows/docker.yml"
      - "cann/**"
      - "arg.json"
      - "docker-bake.hcl"
  pull_request:
    branches:
      - "main"
    paths:
      - ".github/workflows/docker.yml"
      - "cann/**"
      - "arg.json"
      - "docker-bake.hcl"
  release:
    types:
      - "published"

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.list-target.outputs.targets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List targets
        id: list-target
        uses: docker/bake-action/subaction/list-targets@v6
        with:
          files: |
            arg.json
            docker-bake.hcl

  cann:
    name: build ${{ matrix.target }}
    runs-on: linux-x64-azure
    needs:
      - prepare
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to AscendHub
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v3
        with:
          registry: swr.cn-east-3.myhuaweicloud.com
          username: ${{ secrets.ASCENDHUB_USERNAME }}
          password: ${{ secrets.ASCENDHUB_TOKEN }}

      - name: Login to DockerHub
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to Quay
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Login to OpenMind
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v3
        with:
          registry: swr.cn-southwest-2.myhuaweicloud.com
          username: ${{ secrets.OPENMIND_USERNAME }}
          password: ${{ secrets.OPENMIND_TOKEN }}

      - name: Login to ghcr.io
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          bake-target: "docker-metadata-action"

      - name: Build and push Docker image
        id: bake
        uses: docker/bake-action@v6
        with:
          source: .
          files: |
            ${{ github.workspace }}/arg.json
            ${{ github.workspace }}/docker-bake.hcl
            ${{ steps.metadata.outputs.bake-file-labels }}
            ${{ steps.metadata.outputs.bake-file-annotations }}
          targets: ${{ matrix.target }}
          provenance: false
          sbom: false
          push: ${{ github.event_name == 'release' }}

      - name: Export metadata
        id: export
        if: ${{ steps.bake.outputs.metadata }}
        shell: bash
        run: |
          METADATA_FILE_NAME="${{ matrix.target }}-metadata.json"
          echo "metadata-file-name=${METADATA_FILE_NAME}" >> $GITHUB_OUTPUT
          echo '${{ steps.bake.outputs.metadata }}' > /tmp/${METADATA_FILE_NAME}

      - name: Upload metadata
        id: upload-artifact
        if: ${{ inputs.upload-metadata }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.export.outputs.metadata-file-name }}
          path: /tmp/${{ steps.export.outputs.metadata-file-name }}
          if-no-files-found: error
          retention-days: 7

      - name: Show space
        if: ${{ always() }}
        shell: bash
        run: |
          set -x
          df -h
          docker images -a
